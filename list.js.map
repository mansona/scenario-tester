{"version":3,"file":"list.js","sourceRoot":"","sources":["list.ts"],"names":[],"mappings":"AAAA,OAAO,EAAY,aAAa,EAAE,MAAM,YAAY,CAAC;AACrD,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAE/C,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;AAQhC,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,MAAkB;IAC3C,IAAI,MAAM,CAAC,OAAO,EAAE;QAClB,KAAK,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,EAAE;YAC5B,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;SAC7D;KACF;IACD,KAAK,IAAI,OAAO,IAAI,MAAM,CAAC,KAAK,EAAE;QAChC,KAAK,IAAI,IAAI,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;YAClC,MAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SAC7B;KACF;IACD,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,MAAkB;IAChD,IAAI,SAAS,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,IAAI,MAAM,CAAC,MAAM,EAAE;QACjB,OAAO,CAAC,MAAM,CAAC,KAAK,CAClB,IAAI,CAAC,SAAS,CAAC;YACb,OAAO,EAAE,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAClC,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC;aAC9C,CAAC,CAAC;YACH,IAAI,EAAE,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;SAC/C,CAAC,CACH,CAAC;KACH;SAAM;QACL,KAAK,IAAI,QAAQ,IAAI,SAAS,EAAE;YAC9B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;SAC5C;KACF;AACH,CAAC","sourcesContent":["import { Scenario, seenScenarios } from './index.js';\nimport glob from 'glob';\nimport { resolve } from 'path';\nimport { format } from 'util';\n\nimport { createRequire } from 'node:module';\nconst require = createRequire(import.meta.url);\n\nconst { sync: globSync } = glob;\n\nexport interface ListParams {\n  files: string[];\n  require: string[] | undefined;\n  matrix: string | undefined;\n}\n\nexport async function list(params: ListParams): Promise<Scenario[]> {\n  if (params.require) {\n    for (let r of params.require) {\n      await import(require.resolve(r, { paths: [process.cwd()]}));\n    }\n  }\n  for (let pattern of params.files) {\n    for (let file of globSync(pattern)) {\n      await import(resolve(file));\n    }\n  }\n  return seenScenarios;\n}\n\nexport async function printList(params: ListParams) {\n  let scenarios = await list(params);\n  if (params.matrix) {\n    process.stdout.write(\n      JSON.stringify({\n        include: scenarios.map(scenario => ({\n          name: scenario.name,\n          command: format(params.matrix, scenario.name),\n        })),\n        name: scenarios.map(scenario => scenario.name),\n      })\n    );\n  } else {\n    for (let scenario of scenarios) {\n      process.stdout.write(scenario.name + '\\n');\n    }\n  }\n}\n"]}